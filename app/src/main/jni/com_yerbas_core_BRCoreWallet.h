/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_yerbas_core_BRCoreWallet */

#ifndef _Included_com_yerbas_core_BRCoreWallet
#define _Included_com_yerbas_core_BRCoreWallet
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    createJniCoreWallet
 * Signature: ([Lcom/yerbaswallet/core/BRCoreTransaction;Lcom/yerbaswallet/core/BRCoreMasterPubKey;)J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_createJniCoreWallet
        (JNIEnv *, jclass, jobjectArray, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    installListener
 * Signature: (Lcom/yerbaswallet/core/BRCoreWallet/Listener;)V
 */
JNIEXPORT void JNICALL Java_com_yerbaswallet_core_BRCoreWallet_installListener
        (JNIEnv *, jobject, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getReceiveAddress
 * Signature: ()Lcom/yerbaswallet/core/BRCoreAddress;
 */
JNIEXPORT jobject JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getReceiveAddress
        (JNIEnv *, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getAllAddresses
 * Signature: ()[Lcom/yerbaswallet/core/BRCoreAddress;
 */
JNIEXPORT jobjectArray JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getAllAddresses
        (JNIEnv *, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    containsAddress
 * Signature: (Lcom/yerbaswallet/core/BRCoreAddress;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_yerbaswallet_core_BRCoreWallet_containsAddress
        (JNIEnv *, jobject, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    addressIsUsed
 * Signature: (Lcom/yerbaswallet/core/BRCoreAddress;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_yerbaswallet_core_BRCoreWallet_addressIsUsed
        (JNIEnv *, jobject, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    jniGetTransactions
 * Signature: ()[Lcom/yerbaswallet/core/BRCoreTransaction;
 */
JNIEXPORT jobjectArray JNICALL Java_com_yerbaswallet_core_BRCoreWallet_jniGetTransactions
        (JNIEnv *, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getTransactionsConfirmedBefore
 * Signature: (J)[Lcom/yerbaswallet/core/BRCoreTransaction;
 */
JNIEXPORT jobjectArray JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getTransactionsConfirmedBefore
        (JNIEnv *, jobject, jlong);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getBalance
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getBalance
        (JNIEnv *, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getTotalSent
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getTotalSent
        (JNIEnv *, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getTotalReceived
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getTotalReceived
        (JNIEnv *, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getFeePerKb
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getFeePerKb
        (JNIEnv *, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    setFeePerKb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_yerbaswallet_core_BRCoreWallet_setFeePerKb
        (JNIEnv *, jobject, jlong);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getMaxFeePerKb
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getMaxFeePerKb
        (JNIEnv *, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getDefaultFeePerKb
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getDefaultFeePerKb
        (JNIEnv *, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    createTransaction
 * Signature: (JLcom/yerbaswallet/core/BRCoreAddress;)Lcom/yerbaswallet/core/BRCoreTransaction;
 */
JNIEXPORT jobject JNICALL Java_com_yerbaswallet_core_BRCoreWallet_createTransaction
        (JNIEnv *, jobject, jlong, jobject);

//JNIEXPORT jboolean JNICALL
//Java_com_yerbaswallet_core_BRCoreWallet_isAssetNameValid(JNIEnv *env, jobject instance,
//                                                      jobject jPeerManager, jobject jListener,
//                                                      jstring assetName_,
//                                                      jint assetNameLen);

JNIEXPORT void JNICALL
Java_com_yerbaswallet_core_BRCoreWallet_isAssetNameValid(JNIEnv *env, jobject instance,
                                                      jobject peerManager, /*jobject listener,*/
                                                      jstring assetName_, jint assetNameLen,
                                                      jobject checkAssetNameListener);
/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    createAssetTransaction
 * Signature: ([Lcom/yerbaswallet/core/BRCoreTransactionOutput;)Lcom/yerbaswallet/core/BRCoreTransaction;
 */

JNIEXPORT jobject JNICALL
Java_com_yerbaswallet_core_BRCoreWallet_createAssetTransaction(JNIEnv *env, jobject instance,
                                                            jlong amount,
                                                            jobject addressObject,
                                                            jobject assetObject);

JNIEXPORT jobject JNICALL
Java_com_yerbaswallet_core_BRCoreWallet_createSubAssetTransaction(JNIEnv *env, jobject instance,
                                                               jlong amount,
                                                               jobject addressObject,
                                                               jobject assetObject,
                                                               jobject rootAssetObject);

JNIEXPORT jobject JNICALL
Java_com_yerbaswallet_core_BRCoreWallet_createUniqueAssetTransaction(JNIEnv *env, jobject instance,
                                                                  jlong amount,
                                                                  jobject addressObject,
                                                                  jobject assetObject,
                                                                  jobject rootAssetObject);

JNIEXPORT jobject JNICALL
Java_com_yerbaswallet_core_BRCoreWallet_burnAsset(JNIEnv *env, jobject instance, jobject assetObject);

JNIEXPORT jobjectArray JNICALL
Java_com_yerbaswallet_core_BRCoreWallet_decomposeTransaction(JNIEnv *env, jobject instance,
                                                          jobject tx);

JNIEXPORT jobject JNICALL
Java_com_yerbaswallet_core_BRCoreWallet_transferAsset(JNIEnv *env, jobject instance, jdouble amount,
                                                   jstring address_, jobject assetObject);

JNIEXPORT jobject JNICALL
Java_com_yerbaswallet_core_BRCoreWallet_transferOwnerShipAsset(JNIEnv *env, jobject instance, jdouble amount,
                                                            jstring address_, jobject assetObject);
/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    createTransactionForOutputs
 * Signature: ([Lcom/yerbaswallet/core/BRCoreTransactionOutput;)Lcom/yerbaswallet/core/BRCoreTransaction;
 */
JNIEXPORT jobject JNICALL Java_com_yerbaswallet_core_BRCoreWallet_createTransactionForOutputs
        (JNIEnv *, jobject, jobjectArray);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    signTransaction
 * Signature: (Lcom/yerbaswallet/core/BRCoreTransaction;I[B)Z
 */
JNIEXPORT jboolean JNICALL Java_com_yerbaswallet_core_BRCoreWallet_signTransaction
        (JNIEnv *, jobject, jobject, jint, jbyteArray);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    containsTransaction
 * Signature: (Lcom/yerbaswallet/core/BRCoreTransaction;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_yerbaswallet_core_BRCoreWallet_containsTransaction
        (JNIEnv *, jobject, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    jniRegisterTransaction
 * Signature: (Lcom/yerbaswallet/core/BRCoreTransaction;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_yerbaswallet_core_BRCoreWallet_jniRegisterTransaction
        (JNIEnv *, jobject, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    removeTransaction
 * Signature: ([B)V
 */
JNIEXPORT void JNICALL Java_com_yerbaswallet_core_BRCoreWallet_removeTransaction
        (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    updateTransactions
 * Signature: ([[BJJ)V
 */
JNIEXPORT void JNICALL Java_com_yerbaswallet_core_BRCoreWallet_updateTransactions
        (JNIEnv *, jobject, jobjectArray, jlong, jlong);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    jniTransactionForHash
 * Signature: ([B)Lcom/yerbaswallet/core/BRCoreTransaction;
 */
JNIEXPORT jobject JNICALL Java_com_yerbaswallet_core_BRCoreWallet_jniTransactionForHash
        (JNIEnv *, jobject, jbyteArray);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    transactionIsValid
 * Signature: (Lcom/yerbaswallet/core/BRCoreTransaction;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_yerbaswallet_core_BRCoreWallet_transactionIsValid
        (JNIEnv *, jobject, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    transactionIsPending
 * Signature: (Lcom/yerbaswallet/core/BRCoreTransaction;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_yerbaswallet_core_BRCoreWallet_transactionIsPending
        (JNIEnv *, jobject, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    transactionIsVerified
 * Signature: (Lcom/yerbaswallet/core/BRCoreTransaction;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_yerbaswallet_core_BRCoreWallet_transactionIsVerified
        (JNIEnv *, jobject, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getTransactionFee
 * Signature: (Lcom/yerbaswallet/core/BRCoreTransaction;)J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getTransactionFee
        (JNIEnv *, jobject, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getTransactionAmountSent
 * Signature: (Lcom/yerbaswallet/core/BRCoreTransaction;)J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getTransactionAmountSent
        (JNIEnv *, jobject, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getTransactionAmountReceived
 * Signature: (Lcom/yerbaswallet/core/BRCoreTransaction;)J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getTransactionAmountReceived
        (JNIEnv *, jobject, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getBalanceAfterTransaction
 * Signature: (Lcom/yerbaswallet/core/BRCoreTransaction;)J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getBalanceAfterTransaction
        (JNIEnv *, jobject, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getFeeForTransactionSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getFeeForTransactionSize
        (JNIEnv *, jobject, jlong);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getFeeForTransactionAmount
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getFeeForTransactionAmount
        (JNIEnv *, jobject, jlong);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getMinOutputAmount
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getMinOutputAmount
        (JNIEnv *, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    getMaxOutputAmount
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_yerbaswallet_core_BRCoreWallet_getMaxOutputAmount
        (JNIEnv *, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    disposeNative
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_yerbaswallet_core_BRCoreWallet_disposeNative
        (JNIEnv *, jobject);

/*
 * Class:     com_yerbas_core_BRCoreWallet
 * Method:    initializeNative
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_yerbaswallet_core_BRCoreWallet_initializeNative
        (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
